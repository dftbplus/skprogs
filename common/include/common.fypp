#!-------------------------------------------------------------------------------------------------!
#!  DFTB+: general package for performing fast atomistic simulations                               !
#!  Copyright (C) 2006 - 2024  DFTB+ developers group                                              !
#!                                                                                                 !
#!  See the LICENSE file for terms of usage and distribution.                                      !
#!-------------------------------------------------------------------------------------------------!
#:mute
#:if not defined('_COMMON_FYPP_')
#:set _COMMON_FYPP_

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#! Default values for all preprocessor variables
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#:set DEBUG = getvar('DEBUG', 0)
#:set WITH_ASSERT = defined('WITH_ASSERT') or DEBUG > 0
#:set WITH_MPI = defined('WITH_MPI')


#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#! ASSERT and DEBUG related macros
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#! Check a condition if WITH_ASSERT is True and call assertError if condition is False.
#! If an optional text string is included, print this in addition as an error
#:def ASSERT(cond, msg=None)
  #:if WITH_ASSERT
  if (.not. (${cond}$)) then
    block
      use common_assert, only : assertError
      #:if msg
        call assertError("${_FILE_}$", ${_LINE_}$, ${msg}$)
      #:else
      call assertError("${_FILE_}$", ${_LINE_}$)
      #:endif
    end block
  end if
  #:endif
#:enddef ASSERT

#! Insert code if DEBUG level is greater than zero.
#:def DEBUG_CODE(code)
  #:if DEBUG > 0
  $:code
  #:endif
#:enddef DEBUG_CODE


#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#! Misc macros
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#! Gives a Fortran logical values corresponding to a bool expr.
#:def FORTRAN_LOGICAL(expr)
#{if expr}#.true.#{else}#.false.#{endif}#
#:enddef FORTRAN_LOGICAL

#! Returns the suffix for a dummy argument for a given rank
#:def FORTRAN_ARG_DIM_SUFFIX(rank)
#{if rank == 0}##{else}#(${":" + ",:" * (rank - 1)}$)#{endif}#
#:enddef


#! Creates a class instance by allocating, initializing and move_allocing a specific type
#!
#! Args:
#!     cls (str): Name of the LHS variable (must be a class)
#!     dyntype (str): Dynamic type of the actual instance to be initialized
#!     init (str): Initialization routine to call (with allocated instance as first arg)
#!     initargs (str): Further arguments to pass to the init routine.
#:def CREATE_CLASS(cls, dyntype, init, *initargs)
block
  type(${dyntype}$), allocatable :: inst
  allocate(inst)
  call ${init}$(inst, ${", ".join(initargs)}$)
  call move_alloc(inst, ${cls}$)
end block
#:enddef


#! Simple macro printing out the position of a line
#:def PRINT_POSITION()
block
  use iso_fortran_env, only : output_unit
  write(output_unit, "(a)") "Reached line ${_LINE_}$ in ${_FILE_}$"
  flush(output_unit)
end block
#:enddef

#:endif
#:endmute
